# Setup DQMStore patch

cd /dev/shm/$USER/
cmsrel CMSSW_11_0_0_pre5
cd CMSSW_11_0_0_pre5/src
cmsenv
git cms-merge-topic schneiml:dqm-booking-popularity
scram b -j16 # ~30min

# Run the short matrix to get booking logs

runTheMatrix.py -l limited --command '-n 1' --ibeos -j8 # ~1h

# Parse logs into SQLite db

grep -nR DQMStore::book *.*_* | awk '
  BEGIN { 
    print("CREATE TABLE IF NOT EXISTS Booking(wf, step, type, module, path); BEGIN;") 
  }
  match($0, /([0-9]+[.][0-9]+)[^\/]*\/step(.)[^:]*:[0-9]+:([^ ]+) ([^ ]*) (.*)$/, a) { 
    print("INSERT INTO Booking(wf, step, type, module, path) VALUES(" a[1] ", " a[2] ", \x22" a[3] "\x22, \x22" a[4] "\x22, \x22" a[5] "\x22);" )
  } 
  END { 
    print("COMMIT;") 
  }
' | sqlite3 booking.db

# On the DQMGUI server, parse the old access logs

for f in /data/srv/logs/dqmgui/offline/old-logs-2018*.zip; do 
  unzip -p $f weblog-* | grep 'fairy' | gawk '
    BEGIN { 
      print("CREATE TABLE IF NOT EXISTS Access(dataset, path, who); BEGIN;") 
    } 
    match($0, /obj=archive%2F[0-9]+%2F([^%]+%2F[^%]+%2F[^%]+)%2F([^;]+);.*auth: OK "([^"]*)"/, a) { 
      gsub(/%2F/, "/", a[1]); 
      gsub(/%2F/, "/", a[2]); 
      gsub(/%20/, " ", a[2]); 
      gsub(/%2B/, "+", a[2]); 
      gsub(/%3D/, "=", a[2]); 
      print("INSERT INTO Access(dataset, path, who) VALUES(\x22" a[1] "\x22, \x22" a[2] "\x22, \x22" a[3] "\x22);" ) 
    } 
    END { 
      print("COMMIT;")
    }
  ' | sqlite3 access.db
done

# Also do that on the other GUI(s), and copy and merge the files to one place:
sqlite access.db
 ATTACH 'relval_access.db' as relval;
 INSERT INTO Access(dataset, path, who) SELECT dataset, path, who FROM relval.Access;

# do some analysis
sqlite3 booking.db
 CERATE INDEX metomod ON Booking(path);

sqlite3 access.db
 ATTACH "booking.db" as booking;
 SELECT sum(views), module FROM (
   -- pre-group views per ME to keep the number of rows down
   SELECT count(*) as views, path FROM Access GROUP BY path
 ) NATURAL JOIN (
   -- pre-group bookings to prevent double counting, suppress
   -- (unset) from reading DQMIO (probably?) and MEtoEDM IO.
   SELECT DISTINCT path, module FROM Booking WHERE module not in ("(unset)", "EDMtoMEConverter")
 )
 GROUP BY module ORDER BY 1 DESC;

# or more detailed, by PD
sqlite3 access.db <<SQL
 ATTACH "booking.db" as booking;
 CREATE TEMP TABLE pdviews AS SELECT substr(dataset, 0, instr(dataset, '/')) as pd, count(*) as views  FROM Access GROUP BY pd;
.separator \t
.header on
.once result.txt
 SELECT sum(views), module, pd 
 FROM (
   SELECT count(*) as views, path, substr(dataset, 0, instr(dataset, '/')) as pd FROM Access GROUP BY path, pd
 ) AS pathviews NATURAL JOIN (
   SELECT DISTINCT path, module FROM Booking WHERE module not in ("(unset)", "EDMtoMEConverter")
 ) 
 GROUP BY module, pd HAVING sum(views) > 1000 
 ORDER BY (
   SELECT views FROM pdviews WHERE pdviews.pd = pathviews.pd
 ) DESC, sum(views) DESC;
SQL


# or more detailed, MEs by PD
for PD in StreamExpress JetHT ZeroBias StreamExpressCosmics SingleMuon Cosmics EGamma; do
sqlite3 access.db <<SQL
.separator \t
.header on
SELECT count(*), 
  replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(path, '9', '?'), '8', '?'), '7', '?'), '6', '?'), '5', '?'), '4', '?'), '3', '?'), '2', '?'), '1', '?'), '0', '?') as cleanpath, 
  substr(dataset, 0, instr(dataset, '/')) as pd 
FROM Access WHERE pd = '$PD' 
GROUP BY cleanpath ORDER BY count(*) DESC LIMIT 50;
SQL
done | column -t -s "	" > topmes.txt 


# result is in result.txt
